{
    "Send D2C message": {
        "prefix": "iotSendD2CMessage",
        "description": "Send D2C message",
        "body": [
            "'use strict';",
            "",
            "var clientFromConnectionString = require('azure-iot-device-mqtt').clientFromConnectionString;",
            "var Message = require('azure-iot-device').Message;",
            "var connectionString = '<deviceConnectionString>';",
            "var client = clientFromConnectionString(connectionString);",
            "",
            "function printResultFor(op, client) {",
            "\treturn function printResult(err, res) {",
            "\t\tif (err) console.log(op + ' error: ' + err.toString());",
            "\t\tif (res) console.log(op + ' status: ' + res.constructor.name);",
            "\t\tclient.close();",
            "\t};",
            "}",
            "",
            "var connectCallback = function (err) {",
            "\tif (err) {",
            "\t\tconsole.log('Could not connect: ' + err);",
            "\t} else {",
            "\t\tconsole.log('Client connected');",
            "\t\tvar data = '${1:Hello IoT Hub!}';",
            "\t\tvar message = new Message(data);",
            "\t\tconsole.log('Sending message: ' + message.getData());",
            "\t\tclient.sendEvent(message, printResultFor('send', client));",
            "\t}",
            "};",
            "",
            "client.open(connectCallback);"
        ]
    },
    "Monitor D2C message": {
        "prefix": "iotMonitorD2CMessage",
        "description": "Monitor D2C message",
        "body": [
            "'use strict';",
            "",
            "var EventHubClient = require('azure-event-hubs').Client;",
            "",
            "var connectionString = '<iotHubConnectionString>';",
            "var printError = function (err) {",
            "\tconsole.log(err.message);",
            "};",
            "",
            "var printMessage = function (message) {",
            "\tconsole.log('Message received: ');",
            "\tconsole.log(JSON.stringify(message.body));",
            "\tconsole.log('');",
            "};",
            "",
            "var client = EventHubClient.fromConnectionString(connectionString);",
            "console.log('Start monitoring IoT Hub...')",
            "client.open()",
            "\t.then(client.getPartitionIds.bind(client))",
            "\t.then(function (partitionIds) {",
            "\t\treturn partitionIds.map(function (partitionId) {",
            "\t\t\treturn client.createReceiver('$$Default', partitionId, {",
            "\t\t\t\t'startAfterTime': Date.now()",
            "\t\t\t}).then(function (receiver) {",
            "\t\t\t\tconsole.log('Created partition receiver: ' + partitionId)",
            "\t\t\t\treceiver.on('errorReceived', printError);",
            "\t\t\t\treceiver.on('message', printMessage);",
            "\t\t\t});",
            "\t\t});",
            "\t})",
            "\t.catch(printError);"
        ]
    },
    "Send C2D message": {
        "prefix": "iotSendC2DMessage",
        "description": "Send C2D message",
        "body": [
            "'use strict';",
            "",
            "var Client = require('azure-iothub').Client;",
            "var Message = require('azure-iot-common').Message;",
            "var connectionString = '<iotHubConnectionString>';",
            "var targetDevice = '${1:<targetDeviceId>}';",
            "var serviceClient = Client.fromConnectionString(connectionString);",
            "",
            "function printResultFor(op) {",
            "\treturn function printResult(err, res) {",
            "\t\tif (err) console.log(op + ' error: ' + err.toString());",
            "\t\tif (res) console.log(op + ' status: ' + res.constructor.name);",
            "\t\tserviceClient.close();",
            "\t};",
            "}",
            "",
            "function receiveFeedback(err, receiver) {",
            "\treceiver.on('message', function (msg) {",
            "\t\tconsole.log('Feedback message:')",
            "\t\tconsole.log(msg.getData().toString('utf-8'));",
            "\t});",
            "}",
            "",
            "serviceClient.open(function (err) {",
            "\tif (err) {",
            "\t\tconsole.error('Could not connect: ' + err.message);",
            "\t} else {",
            "\t\tconsole.log('Service client connected');",
            "\t\tserviceClient.getFeedbackReceiver(receiveFeedback);",
            "\t\tvar message = new Message('${2:Cloud to device message.}');",
            "\t\tmessage.ack = 'full';",
            "\t\tmessage.messageId = 'My Message ID ';",
            "\t\tconsole.log('Sending message: ' + message.getData());",
            "\t\tserviceClient.send(targetDevice, message, printResultFor('send'));",
            "\t}",
            "});"
        ]
    },
    "Monitor C2D message": {
        "prefix": "iotMonitorC2DMessage",
        "description": "Monitor C2D message",
        "body": [
            "'use strict';",
            "",
            "var clientFromConnectionString = require('azure-iot-device-mqtt').clientFromConnectionString;",
            "var Message = require('azure-iot-device').Message;",
            "var connectionString = '<deviceConnectionString>';",
            "var client = clientFromConnectionString(connectionString);",
            "",
            "function printResultFor(op) {",
            "\treturn function printResult(err, res) {",
            "\t\tif (err) console.log(op + ' error: ' + err.toString());",
            "\t\tif (res) console.log(op + ' status: ' + res.constructor.name);",
            "\t};",
            "}",
            "",
            "var connectCallback = function (err) {",
            "\tif (err) {",
            "\t\tconsole.log('Could not connect: ' + err);",
            "\t} else {",
            "\t\tconsole.log('Client connected');",
            "\t\tclient.on('message', function (msg) {",
            "\t\t\tconsole.log('[Id]: ' + msg.messageId + ' [Body]: ' + msg.data);",
            "\t\t\tclient.complete(msg, printResultFor('completed'));",
            "\t\t});",
            "\t}",
            "};",
            "",
            "client.open(connectCallback);"
        ]
    },
    "Call direct methods": {
        "prefix": "iotCallDirectMethods",
        "description": "Call direct methods",
        "body": [
            "'use strict';",
            "",
            "var Client = require('azure-iothub').Client;",
            "var connectionString = '<iotHubConnectionString>';",
            "",
            "var methodName = '${2:writeLine}';",
            "var deviceId = '${1:<targetDeviceId>}';",
            "var client = Client.fromConnectionString(connectionString);",
            "",
            "var methodParams = {",
            "\tmethodName: methodName,",
            "\tpayload: 'a line to be written',",
            "\ttimeoutInSeconds: 30",
            "};",
            "",
            "client.invokeDeviceMethod(deviceId, methodParams, function (err, result) {",
            "\tif (err) {",
            "\t\tconsole.error('Failed to invoke method \\'' + methodName + '\\': ' + err.message);",
            "\t} else {",
            "\t\tconsole.log(methodName + ' on ' + deviceId + ':');",
            "\t\tconsole.log(JSON.stringify(result, null, 2));",
            "\t}",
            "});"
        ]
    },
    "Receive direct methods": {
        "prefix": "iotReceiveDirectMethods",
        "description": "Receive direct methods",
        "body": [
            "'use strict';",
            "",
            "var Mqtt = require('azure-iot-device-mqtt').Mqtt;",
            "var DeviceClient = require('azure-iot-device').Client;",
            "var connectionString = '<deviceConnectionString>';",
            "var client = DeviceClient.fromConnectionString(connectionString, Mqtt);",
            "",
            "function onWriteLine(request, response) {",
            "\tconsole.log(request.payload);",
            "",
            "\tresponse.send(200, 'Input was written to log.', function (err) {",
            "\t\tif (err) {",
            "\t\t\tconsole.error('An error ocurred when sending a method response:\\n' + err.toString());",
            "\t\t} else {",
            "\t\t\tconsole.log('Response to method \\'' + request.methodName + '\\' sent successfully.');",
            "\t\t}",
            "\t});",
            "}",
            "",
            "client.open(function (err) {",
            "\tif (err) {",
            "\t\tconsole.error('could not open IoTHub client');",
            "\t} else {",
            "\t\tconsole.log('client opened');",
            "\t\tclient.onDeviceMethod('${1:writeLine}', onWriteLine);",
            "\t}",
            "});"
        ]
    }
}